import React, { useEffect, useState } from "react";
import styles from "./AdminDashboard.module.scss";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import {
  CircularProgress,
  FormControl,
  NativeSelect,
  Button,
} from "@mui/material";
import { config } from "../../constants/apiConfig";
import { useGlobalState } from "../../context/GlobalStateContext";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

interface Booking {
  _id: string;
  playgroundId: {
    _id: string;
    name: string;
    address: string;
    size: string;
    price: number;
    description: string;
    images: string[];
    ownerId: string;
    reviews: any[];
    suspended: boolean;
    availableDays: {
      date: string;
      times: string[];
      _id: string;
    }[];
    createdAt: string;
    updatedAt: string;
    __v: number;
  };
  date: string;
  time: string;
  userId: {
    _id: string;
    name: string;
    email: string;
    phoneNumber: string;
  };
  price: number;
  status: string;
  paymentStatus: string;
  createdAt: string;
  updatedAt: string;
  __v: number;
}

interface Pitch {
  _id: string;
  name: string;
  totalRevenue: number; // Total revenue generated by the pitch
}

const AdminDashboard: React.FC = () => {
  const { user } = useGlobalState();
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [ownerData, setOwnerData] = useState<any>();
  const [pitches, setPitches] = useState<Pitch[]>([]);

  // Fetch bookings data
  const fetchBookings = async () => {
    setLoading(true);
    try {
      const res = await fetch(`${config.Admin.dashboard}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });
      if (res.ok) {
        const data = await res.json();
        setOwnerData(data.data);
        // setBookings(data.bookings);
        setLoading(false);
      } else {
        const data = await res.json();
        setError(data.message);
        setLoading(false);
      }
    } catch (err) {
      setLoading(false);
      setError("حدث خطأ أثناء جلب البيانات. يرجى المحاولة مرة أخرى.");
    }
  };

  // Fetch pitches data
  const fetchPitches = async () => {
    setLoading(true);
    try {
      const res = await fetch(config.user.getAll, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });
      if (res.ok) {
        const data = await res.json();
        setPitches(data.playgrounds);
        setLoading(false);
      } else {
        const data = await res.json();
        setError(data.message);
        setLoading(false);
      }
    } catch (err) {
      setLoading(false);
      setError("حدث خطأ أثناء جلب بيانات الملاعب. يرجى المحاولة مرة أخرى.");
    }
  };

  useEffect(() => {
    fetchBookings();
    fetchPitches();
  }, []);

  const updatePaymentStatus = async (
    bookingId: string,
    newPaymentStatus: string
  ) => {
    try {
      const res = await fetch(`${config.Admin.update}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: JSON.stringify({
          bookingId: bookingId,
          paymentStatus: newPaymentStatus,
        }),
      });

      if (res.ok) {
        const updatedBooking = await res.json();
        setBookings((prevBookings) =>
          prevBookings?.map((booking) =>
            booking._id === bookingId
              ? { ...booking, paymentStatus: newPaymentStatus }
              : booking
          )
        );
      } else {
        const data = await res.json();
        setError(
          data.message || "فشل تحديث حالة الدفع. يرجى المحاولة مرة أخرى."
        );
      }
    } catch (err) {
      setError("حدث خطأ أثناء تحديث حالة الدفع. يرجى المحاولة مرة أخرى.");
    }
  };

  const banUser = async (userId: string) => {
    try {
      const res = await fetch(`${config.Admin.ban}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: JSON.stringify({
          userId: userId,
          isActive: false,
        }),
      });

      if (res.ok) {
        const updatedUser = await res.json();
        alert(`تم حظر المستخدم ${updatedUser.name}`);
      } else {
        const data = await res.json();
        setError(data.message || "فشل حظر المستخدم. يرجى المحاولة مرة أخرى.");
      }
    } catch (err) {
      setError("حدث خطأ أثناء حظر المستخدم. يرجى المحاولة مرة أخرى.");
    }
  };

  const confirmPaid = async (ownerId: String) => {
    const res = await fetch(config.Admin.confirmPaid, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
      body: JSON.stringify({
        ownerId,
      }),
    });
    const data = await res.json();
    if (data.status == "success") {
      fetchBookings();
      fetchPitches();
    } else {
      alert(data.message);
    }
  };

  const calculateTotalProfit = () => {
    return bookings.reduce((total, booking) => total + booking.price * 0.1, 0); // Assuming 10% profit
  };

  const calculateAmountDue = (totalRevenue: number) => {
    return totalRevenue * 0.1; // Assuming 10% of total revenue is due
  };

  const adminProfitData = {
    labels: bookings?.map((booking) => booking.date),
    datasets: [
      {
        label: "إجمالي الربح",
        data: bookings?.map((booking) => booking.price * 0.1), // Assuming 10% profit
        borderColor: "#28a745",
        backgroundColor: "rgba(51, 255, 0, 0.2)",
        fill: true,
      },
    ],
  };

  return (
    <div className={styles.userDashboard}>
      <h1>لوحة تحكم الأدمن</h1>
      <br />

      <div className="loading">{loading && <CircularProgress />}</div>
      {!loading && (
        <div>
          {/* Pitches Table */}
          <h2>الملاعب</h2>
          <table className={styles.userDashboardTable}>
            <thead>
              <tr>
                <th>الاسم</th>
                <th>المطلوب دفعه</th>
                <th>تأكيد الدفع</th>
                <th>حظر</th>
              </tr>
            </thead>
            <tbody>
              {ownerData?.map((owner: any) => (
                <tr key={owner._id}>
                  <td>{owner.ownerName}</td>
                  <td>{owner.totalCommission} جنية</td>
                  <td>
                    <Button
                      variant="contained"
                      color="success"
                      onClick={() => confirmPaid(owner.ownerId)}
                    >
                      تأكيد
                    </Button>
                  </td>
                  <td>
                    <Button
                      variant="contained"
                      color="error"
                      onClick={() => banUser(owner.ownerId)}
                    >
                      حظر
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Bookings Table */}
          <h2>حجوزات جميع الملاعب</h2>
          {bookings.length > 0 && !loading && (
            <>
              <table className={styles.userDashboardTable}>
                <thead>
                  <tr>
                    <th>الملعب</th>
                    <th>تاريخ الحجز</th>
                    <th>الوقت</th>
                    <th>حالة الحجز</th>
                    <th>المبلغ</th>
                    <th>تم الدفع</th>
                    <th>حظر</th>
                  </tr>
                </thead>
                <tbody>
                  {bookings?.map((booking) => (
                    <tr key={booking._id}>
                      <td>{booking.playgroundId.name}</td>
                      <td>{booking.date}</td>
                      <td>{booking.time}</td>
                      <td>
                        <span
                          className={`${styles.status} ${
                            styles[
                              booking.status === "قيد الانتظار"
                                ? "pending"
                                : booking.status === "تم التأكيد"
                                ? "confirmed"
                                : "cancelled"
                            ]
                          }`}
                        >
                          {booking.status}
                        </span>
                      </td>
                      <td>{booking.price} جنية</td>
                      <td>
                        <FormControl fullWidth>
                          <NativeSelect
                            value={booking.paymentStatus}
                            onChange={(e) =>
                              updatePaymentStatus(booking._id, e.target.value)
                            }
                            sx={{
                              fontFamily: "Cairo",
                              "& .MuiNativeSelect-select": {},
                              "& .MuiNativeSelect-icon": {},
                            }}
                          >
                            <option value="Pending">قيد الانتظار</option>
                            <option value="Paid">تم الدفع</option>
                            <option value="Failed">فشل الدفع</option>
                          </NativeSelect>
                        </FormControl>
                      </td>
                      <td>
                        <Button
                          variant="contained"
                          color="error"
                          onClick={() => banUser(booking.userId._id)}
                        >
                          حظر
                        </Button>
                      </td>
                    </tr>
                  ))}
                  <tr>
                    <td
                      colSpan={5}
                      style={{ textAlign: "right", fontWeight: "bold" }}
                    >
                      إجمالي الربح:
                    </td>
                    <td style={{ fontWeight: "bold" }}>
                      {calculateTotalProfit()} جنية
                    </td>
                  </tr>
                </tbody>
              </table>

              <div className={styles.graphContainer}>
                <div className={styles.profitGraph}>
                  <h2>إجمالي الربح</h2>
                  <Line data={adminProfitData} />
                </div>
              </div>
            </>
          )}
          {!loading && bookings.length === 0 && (
            <div className={styles.noResults}>لا توجد حجوزات</div>
          )}
        </div>
      )}
    </div>
  );
};

export default AdminDashboard;
